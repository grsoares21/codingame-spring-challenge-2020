import { findPath } from "./geometry";
import { getSignalMatrix } from "./diffusion";

it(`should emit 10 signal with 10 max distance and 0.9 diffusion factor`, () => {
  let map = getMap();
  expect(
    prettyPrintNumberMatrix(getSignalMatrix(map, { x: 15, y: 8 }, 10, 0.9, 9))
  ).toMatchSnapshot();
});

it(`should cross map when emitting signal`, () => {
  let map = getMap();
  expect(
    prettyPrintNumberMatrix(getSignalMatrix(map, { x: 3, y: 4 }, 10, 0.9, 9))
  ).toMatchSnapshot();
  expect(
    prettyPrintNumberMatrix(getSignalMatrix(map, { x: 31, y: 5 }, 10, 0.9, 9))
  ).toMatchSnapshot();
});

it(`should emit 1 signal with 5 max distance and 0.5 diffusion factor`, () => {
  let map = getMap();
  expect(
    prettyPrintNumberMatrix(getSignalMatrix(map, { x: 1, y: 1 }, 5, 0.5, 1))
  ).toMatchSnapshot();
});

it(`should emit -5 signal with 5 max distance and 0.5 diffusion factor`, () => {
  let map = getMap();
  expect(
    prettyPrintNumberMatrix(getSignalMatrix(map, { x: 1, y: 1 }, 5, 0.5, -5))
  ).toMatchSnapshot();
});

function prettyPrintNumberMatrix(matrix: number[][]): string {
  return matrix
    .map((line) =>
      line
        .map((num) => num.toFixed(1))
        .map((num) => (num === "-Infinity" ? "###" : num))
        .join(" ")
    )
    .join("\n");
}

function getMap(): string[][] {
  // prettier-ignore
  return [
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ['#',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#','#','#','#','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ','#'],
    ['#',' ','#',' ','#','#','#','#','#',' ','#',' ','#','#','#','#','#','#','#','#','#',' ','#',' ','#','#','#','#','#',' ','#',' ','#'],
    ['#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'],
    ['#','#','#',' ','#',' ','#',' ','#',' ','#',' ','#','#','#','#','#','#','#','#','#',' ','#',' ','#',' ','#',' ','#',' ','#','#','#'],
    [' ',' ',' ',' ','#',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ','#',' ',' ',' ',' '],
    ['#','#','#',' ','#',' ','#','#','#',' ','#',' ','#',' ','#',' ','#',' ','#',' ','#',' ','#',' ','#','#','#',' ','#',' ','#','#','#'],
    ['#',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ','#'],
    ['#',' ','#','#','#',' ','#',' ','#',' ','#','#','#','#','#',' ','#',' ','#','#','#','#','#',' ','#',' ','#',' ','#','#','#',' ','#'],
    ['#',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ','#'],
    ['#','#','#',' ','#',' ','#','#','#',' ','#',' ','#','#','#',' ','#',' ','#','#','#',' ','#',' ','#','#','#',' ','#',' ','#','#','#'],
    ['#',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ','#',' ','#',' ','#',' ',' ',' ','#',' ',' ',' ',' ',' ','#',' ',' ',' ','#'],
    ['#',' ','#',' ','#','#','#','#','#',' ','#',' ','#',' ','#',' ','#',' ','#',' ','#',' ','#',' ','#','#','#','#','#',' ','#',' ','#'],
    ['#',' ','#',' ',' ',' ',' ',' ',' ',' ','#',' ','#',' ',' ',' ',' ',' ',' ',' ','#',' ','#',' ',' ',' ',' ',' ',' ',' ','#',' ','#'],
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#']
  ];
}
